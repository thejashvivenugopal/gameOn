openapi: 3.1.0
info:
  title: User Management API
  description: REST APIs for managing user data
  version: "1.0"
servers:
  - url: http://localhost:3002
    description: Local development environment

paths:
  /users:
    get:
      operationId: getUsers
      summary: Retrieve all users
      description: Fetch a list of all users
      responses:
        200:
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      operationId: createUser
      summary: Create a new user
      description: Add a new user to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request due to invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userHashId}:
    get:
      operationId: getUserById
      summary: Retrieve a specific user by ID
      description: Fetch details of a user using its ID
      parameters:
        - name: userHashId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      operationId: updateUser
      summary: Update an existing user
      description: Update user details using its ID
      parameters:
        - name: userHashId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteUser
      summary: Delete a user by ID
      description: Remove a user from the database using its ID
      parameters:
        - name: userHashId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        emailId:
          type: string
        mobileNumber:
          type: string
        password:
          type: string
        role:
          type: string
          enum: ['ADMIN','CUSTOMER','OWNER']
        commonFields:
          type: object
          properties:
            createdBy:
              type: string
            createdDate:
              type: string
              format: date-time
            updatedBy:
              type: string
            updatedDate:
              type: string
              format: date-time

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string